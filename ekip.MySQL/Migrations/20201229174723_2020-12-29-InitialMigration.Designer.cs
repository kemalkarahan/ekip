// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ekip.MySQL.EntityFramework;

namespace ekip.MySQL.Migrations
{
    [DbContext(typeof(EkipContext))]
    [Migration("20201229174723_2020-12-29-InitialMigration")]
    partial class _20201229InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ekip.Entities.Concrete.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.BoardContext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("WriterId");

                    b.ToTable("BoardContexts");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WithId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolderId");

                    b.HasIndex("WithId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BegunDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<bool>("Reminder")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("StreamId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("StaffId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StreamId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("StreamId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AttendeeId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AddPersonnel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditAbout")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditIcon")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditLabel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RemovePersonnel")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("ShareStream")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreamId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Preferences");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Preference");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("StaffId");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Notification", b =>
                {
                    b.HasBaseType("ekip.Entities.Concrete.Preference");

                    b.Property<bool>("AboutConversation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AboutMention")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AboutNewMessage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AboutThread")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPreviewEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSoundEnabled")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Staff", b =>
                {
                    b.HasBaseType("ekip.Entities.Concrete.User");

                    b.Property<string>("AboutMe")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PersonalWebPage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasIndex("InstitutionId");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Attachment", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Board", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Institution", "Institution")
                        .WithMany("Boards")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.BoardContext", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Board", "Board")
                        .WithMany("BoardContexts")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Staff", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Conversation", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Staff", "Holder")
                        .WithMany()
                        .HasForeignKey("HolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Staff", "With")
                        .WithMany()
                        .HasForeignKey("WithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Event", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Staff", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Stream", "Stream")
                        .WithMany()
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Follower", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Board", "Board")
                        .WithMany("Followers")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Member", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Staff", "Staff")
                        .WithMany("Members")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Stream", "Stream")
                        .WithMany("Members")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Message", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Staff", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Stream", "Stream")
                        .WithMany("Messages")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Participant", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.User", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Permission", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Stream", "Stream")
                        .WithMany("Permissions")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Preference", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Schedule", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Notification", "Notification")
                        .WithMany("Schedules")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Stream", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Institution", "Institution")
                        .WithMany("Streams")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ekip.Entities.Concrete.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ekip.Entities.Concrete.Staff", b =>
                {
                    b.HasOne("ekip.Entities.Concrete.Institution", "Institution")
                        .WithMany("Staffs")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
